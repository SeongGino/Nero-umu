name: CMake - Linux

on:
  push:
  pull_request:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Get short SHA
      id: get-short-sha
      run: echo "id=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Install Qt6
      uses: jdpurcell/install-qt-action@v5
      with:
        version: '6.8.3'
        modules: 'qt5compat'
        archives: 'qtbase qtwayland qttools qttranslations icu'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{github.workspace}}/build
        -DNERO_GITHASH=${{ steps.get-short-sha.outputs.id }}
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_INSTALL_PREFIX=/usr
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install linuxdeploy
      uses: pcolby/install-linuxdeploy@v1
      with:
        plugins: qt appimage

    - name: Setup AppImage
      env:
        EXTRA_PLATFORM_PLUGINS: libqwayland-generic.so
        EXTRA_QT_MODULES: waylandcompositor
      run: |
        cd ${{ github.workspace }}/build
        make install DESTDIR=AppDir
        install -Dm755 "${{ github.workspace }}/img/ico/ico_32.png" "AppDir/usr/share/icons/hicolor/32x32/apps/xyz.TOS.Nero.png"
        install -Dm755 "${{ github.workspace }}/img/ico/ico_48.png" "AppDir/usr/share/icons/hicolor/48x48/apps/xyz.TOS.Nero.png"
        install -Dm755 "${{ github.workspace }}/img/ico/ico_64.png" "AppDir/usr/share/icons/hicolor/64x64/apps/xyz.TOS.Nero.png"
        install -Dm755 "${{ github.workspace }}/img/ico/ico_128.png" "AppDir/usr/share/icons/hicolor/128x128/apps/xyz.TOS.Nero.png"
        "${{ runner.temp }}/linuxdeploy/linuxdeploy-x86_64.AppImage" --plugin=qt --output appimage --appdir AppDir --desktop-file "${{ github.workspace }}/xyz.TOS.Nero.desktop"
        cp ${{ matrix.file }} ${{ github.workspace }}
      working-directory: ${{ steps.strings.outputs.build-output-dir }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        # Artifact name
        name: Nero-Qt6 # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{ github.workspace }}/build/Nero-Qt6-x86_64.AppImage

    - name: Download a Build Artifact
      uses: actions/download-artifact@v4
